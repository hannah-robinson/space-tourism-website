/* -------------------*/
/* Custom properties  */
/* ------------------ */

/* This is different from how Kevin would usually do it */
:root {
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;

  /* Font-sizes */
  /* Provided Figma styles were in pixels but rem is more accessible, using pixels can overwrite user preferences. The design's base was 16px, so to get the rem values for other font sizes, divide given size by 16 */
  --fs-900: 9.375rem;
  --fs-800: 6.25rem;
  --fs-700: 3.5rem;
  --fs-600: 2rem;
  --fs-500: 1.75rem;
  --fs-400: 1.125rem;
  /* 400 is the base size i.e. body-text size */
  --fs-300: 1rem;
  --fs-200: 0.875rem;

  /* font-families */
  --ff-serif: 'Bellefair', serif;
  --ff-sans-cond: 'Barlow Condensed', sans-serif;
  --ff-sans-normal: 'Barlow', sans-serif;
}

/* -------------- */
/* Reset          */
/* -------------- */

/* https://piccalil.li/blog/a-modern-css-reset/ */

/* Box sizing */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Reset margins */
body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture {
  margin: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  font-weight: 400;
}
/* because serifs were defaulting to bold */

/* Set up the body */
body {
  font-family: var(--ff-sans-normal);
  font-size: var(--fs-400);
  color: hsl(var(--clr-white));
  background-color: hsl(var(--clr-dark));
  line-height: 1.5;
  /* Kevin Powell usually adjusts to 1.5 or1.6 */
  min-height: 100 vh;
  /* Stops and short pages from being an issue */
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Make  form elements easier to work with */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove animations for people who have turned them off */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* ------------------*/
/* Utility classes   */
/* ------------------*/

/* General */

.flex {
  display: flex;
  gap: var(--gap, 1rem);
}

.grid {
  display: grid;
  gap: var(--gap, 1rem);
}

.flow > * + * {
  margin-top: var(--flow-space, 1rem);
  /* 1rem becomes the default
  can change the custom variable in an inline style if you want w.g. style="--flow-space: 4rem" */
  outline: 1px solid red;
}

/* 
* + * is a 'lobotomised owl' and it selects everything that has an adjacent sibling directly before it. Complaint about it is that it's hard for people who stumble across it to understand. you could comment it or use the alternative: 
*:where(:not(:first-child)) 'anything that's not the first child'. Using this with margin-top (or using *:where(:not(:first-child)) with margin-bottom) makes the margin around you box of elements nice and even. The newish pseudo class :where doesn't add any specificity (:is does) leaving the :where out could cause specificity problems. * + * doesn't cause specificity problems either. Andy Bell uses * + *
*/

.container {
  /* padding: 0, 2rem; */
  padding-inline: 2rem;
  margin-inline: auto;
  max-width: 80rem;
}

/* Screen reader only */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap; /* added line */
  border: 0;
}

/* Colours */
.bg-dark {
  background-color: hsl(var(--clr-dark));
}
.bg-accent {
  background-color: hsl(var(--clr-light));
}
.bg-white {
  background-color: hsl(var(--clr-white));
}

.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}

/* .example-component {
  background-color: hsl(var(--clr-light) / 0.2);
} */

/* Typography */

.ff-serif {
  font-family: var(--ff-serif);
}
.ff-sans-cond {
  font-family: var(--ff-sans-cond);
}
.ff-sans-normal {
  font-family: var(--ff-sans-normal);
}

.letter-spacing-1 {
  letter-spacing: 4.75px;
}
.letter-spacing-2 {
  letter-spacing: 2.7px;
}
.letter-spacing-3 {
  letter-spacing: 2.35px;
}

.uppercase {
  text-transform: uppercase;
}

.fs-900 {
  font-size: var(--fs-900);
}
.fs-800 {
  font-size: var(--fs-800);
}
.fs-700 {
  font-size: var(--fs-700);
}
.fs-600 {
  font-size: var(--fs-600);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-300 {
  font-size: var(--fs-300);
}
.fs-200 {
  font-size: var(--fs-200);
}

.fs-900,
.fs-800,
.fs-700,
.fs-600 {
  line-height: 1.1;
}
/* because when lines break on big fonts they get ugly */

.numbered-title {
  font-family: var(--ff-sans-cond);
  font-size: var(--fs-500);
  text-transform: uppercase;
  letter-spacing: 4.72px;
}

.numbered-title span {
  margin-right: 0.5em;
  font-weight: 700;
  color: hsl(var(--clr-white) / 0.25);
}

/* ------------------- */
/* Components         */
/* ------------------- */

.large-button {
  position: relative;
  /* to pair with the ::after decoration's absolute */
  display: grid;
  /* often you'd use display: inline-block but with grid we can place items center*/
  z-index: 1;
  /* When you have a z-index on an absolute postioned image inside something else it's usually a good idea to force a new stacking context. So since we are are using z-index in the ::after we also add one here to set the new context. It won't be able to escape outside of this button*/
  place-items: center;
  /* short-hand for align items and justify items */

  padding: 0 2em;
  border-radius: 50%;
  aspect-ratio: 1;
  /* same as aspect-ratio: 1 / 1 */
  text-decoration: none;
}
.large-button::after {
  /* KP likes pseudo elements for decorations because they are easy and give good animation options */
  content: '';
  /* pseudo elements must have a content property or there'll be nothing there */
  position: absolute;
  z-index: -1;
  width: 100%;
  height: 100%;
  background: hsl(var(--clr-white) / 0.15);
  border-radius: inherit;
  opacity: 0;
  transition: opacity 500ms linear, transform 750ms ease-in-out;
}

.large-button:hover::after,
.large-button:focus::after {
  opacity: 1;
  transform: scale(1.5);
}
/* Instead of doing an animation on the width and the height which are expensive for browser (can lead to repaints and re-flows of content on page), do them on the transform (scale, translate, rotate), which don't. Bonus: plus they are GPU accelerated, so smoother */
